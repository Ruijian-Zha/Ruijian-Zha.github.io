(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{508:function(t,a,s){"use strict";s.r(a);var e=s(4),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"滑动窗口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口"}},[t._v("#")]),t._v(" 滑动窗口")]),t._v(" "),s("h2",{attrs:{id:"算法思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法思路"}},[t._v("#")]),t._v(" 算法思路")]),t._v(" "),s("ol",[s("li",[t._v("使用双指针中的左右指针技巧，初始化 left = right = 0，把索引闭区间 [left, right] 称为一个「窗口」。")]),t._v(" "),s("li",[t._v("先不断地增加 right 指针扩大窗口 [left, right]，直到窗口符合要求")]),t._v(" "),s("li",[t._v("停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求。同时，每次增加 left，我们都要更新一轮结果。")]),t._v(" "),s("li",[t._v("重复第 2 和第 3 步，直到 right 到达尽头。")])]),t._v(" "),s("p",[t._v("第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解。\n左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动。")]),t._v(" "),s("p",[t._v("注意:")]),t._v(" "),s("ul",[s("li",[t._v("滑动窗口适用的题目一般具有单调性")]),t._v(" "),s("li",[t._v("滑动窗口、双指针、单调队列和单调栈经常配合使用")])]),t._v(" "),s("h2",{attrs:{id:"代码模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码模板"}},[t._v("#")]),t._v(" 代码模板")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最朴素的移动窗口，求最大值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用数组模拟列表")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" tt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" hh"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hh "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" tt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" tt"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("tt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ans"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push_back")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nums"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hh"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"练习题目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#练习题目"}},[t._v("#")]),t._v(" 练习题目")]),t._v(" "),s("p",[t._v("[LeetCode 239. Sliding Window Maximum (hard)](https://www.yuque.com/docs/share/ebaed429-d5e6-4c15-908f-5496ac423b9a?# 《Leetcode 239 (hard) Sliding Window Maximum》)")]),t._v(" "),s("blockquote",[s("p",[t._v("deque 一种可以两头编辑的数组")])]),t._v(" "),s("p",[t._v("LeetCode 480. Sliding Window Median (hard)")]),t._v(" "),s("p",[t._v("LeetCode 3. Longest Substring Without Repeating Characters (medium)")]),t._v(" "),s("p",[t._v("LeetCode 76. Minimum Window Substring (hard)")]),t._v(" "),s("p",[t._v("LeetCode 395. Longest Substring with At Least K Repeating Characters (medium)")]),t._v(" "),s("p",[t._v("LeetCode 567. Permutation in String (medium)")]),t._v(" "),s("p",[t._v("LeetCode 438. Find All Anagrams in a String (medium)")]),t._v(" "),s("p",[t._v("LeetCode 209. Minimum Size Subarray Sum (medium)")]),t._v(" "),s("p",[t._v("LeetCode 424. Longest Repeating Character Replacement (medium)")]),t._v(" "),s("p",[t._v("LeetCode 1208. Get Equal Substrings Within Budget (medium)")]),t._v(" "),s("p",[t._v("LeetCode 904. Fruit Into Baskets (medium)")]),t._v(" "),s("p",[t._v("LeetCode 978. Longest Turbulent Subarray (medium)")]),t._v(" "),s("h2",{attrs:{id:"todo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#todo"}},[t._v("#")]),t._v(" TODO")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("LeetCode 992. Subarrays with K Different Integers (hard)")])]),t._v(" "),s("li",[s("p",[t._v("LeetCode 995. Minimum Number of K Consecutive Bit Flips (hard)")])]),t._v(" "),s("li",[s("p",[t._v("LeetCode 1040. Moving Stones Until Consecutive II (medium)")])]),t._v(" "),s("li",[s("p",[t._v("LeetCode 1052. Grumpy Bookstore Owner (medium)")])]),t._v(" "),s("li",[s("p",[t._v("LeetCode 1074. Number of Submatrices That Sum to Target (hard)")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);