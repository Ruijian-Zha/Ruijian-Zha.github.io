(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{514:function(e,t,a){"use strict";a.r(t);var v=a(4),_=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"dfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dfs"}},[e._v("#")]),e._v(" DFS")]),e._v(" "),a("h3",{attrs:{id:"递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[e._v("#")]),e._v(" 递归")]),e._v(" "),a("p",[e._v("递归即为闭包")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("func dfs(){\n    doSomeThing()\n    dfs()\n    doAnotherThing()\n}\n")])])]),a("h3",{attrs:{id:"回溯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯"}},[e._v("#")]),e._v(" 回溯")]),e._v(" "),a("p",[e._v("回溯法，又称 "),a("strong",[e._v("试探法")]),e._v("，当探索到 某一步 时，发现原先 选择的路径 到不了目标，就退回一步重新选择，这种走不通就退回再走的方法叫做"),a("strong",[e._v("回溯法")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("func dfs(){\n    change()\n    dfs()\n    unchange()\n}\n")])])]),a("h3",{attrs:{id:"dfs-递归-回溯-剪枝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dfs-递归-回溯-剪枝"}},[e._v("#")]),e._v(" dfs 递归 回溯 剪枝")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function dfs(){ // 深搜\n    doCounter() // 统计结果\n    doCut() // 剪枝\n    for all router { // 遍历所有路径\n        doSomeThing()   // 搜索处理，保存当前状态等\n        change()    // 当前棋盘变化\n        dfs()       // 递归\n        unchange()  // 回溯棋盘变化（恢复现场）\n        doAnotherThing()\n    }\n}\n")])])]),a("h2",{attrs:{id:"适用于解决的问题特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适用于解决的问题特征"}},[e._v("#")]),e._v(" 适用于解决的问题特征")]),e._v(" "),a("ul",[a("li",[e._v("深度优先搜索经常用来处理数据量非常庞大的问题\n"),a("blockquote",[a("p",[e._v("比如数独问题，用宽搜搜不完的")])])]),e._v(" "),a("li",[e._v("常用于解决"),a("strong",[e._v("树形问题")])]),e._v(" "),a("li",[a("strong",[e._v("宽度优先搜索")]),e._v("经常用来处理最短路径，或最短距离")]),e._v(" "),a("li",[e._v("深度搜索不一定等于递归，也可以用循环来实现")]),e._v(" "),a("li",[e._v("所谓回溯就是恢复初始状态（恢复现场）\n"),a("blockquote",[a("p",[e._v("如果我们的状态是整个棋盘，就需要恢复现场，如果是某一个格子，就不需要恢复现场")])])])]),e._v(" "),a("h2",{attrs:{id:"经典问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#经典问题"}},[e._v("#")]),e._v(" 经典问题")]),e._v(" "),a("p",[e._v("引入几个简单问题，帮助大家理解概念")]),e._v(" "),a("ul",[a("li",[e._v("递归经典问题：汉诺塔")]),e._v(" "),a("li",[e._v("回溯经典问题：八皇后")])]),e._v(" "),a("h3",{attrs:{id:"递归经典-汉诺塔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归经典-汉诺塔"}},[e._v("#")]),e._v(" 递归经典：汉诺塔")]),e._v(" "),a("p",[e._v("三座塔A, B, C，求移动的最小次数")]),e._v(" "),a("p",[e._v("分三步：")]),e._v(" "),a("ol",[a("li",[e._v("把上面的n-1，从"),a("code",[e._v("A->B")]),e._v(";")]),e._v(" "),a("li",[e._v("把最下面的盘子，从"),a("code",[e._v("A->C")]),e._v(";")]),e._v(" "),a("li",[e._v("把B上的n-1，从"),a("code",[e._v("B->A")]),e._v(";")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://demo.codimd.org/s/r10l9dOPv",target:"_blank",rel:"noopener noreferrer"}},[e._v("面试题 08.06. 汉诺塔问题"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("所有递归问题都可以转化为递推求解")]),e._v(" "),a("blockquote",[a("p",[e._v("比如题目LeetCode 62. Unique Paths (medium)可以使用递归求路径总数，也可以用动态规划，根据状态转换方程，递推求解")])]),e._v(" "),a("p",[e._v("我的习惯是如果方便使用递推求解，可以直接递推，如果递归更容易理解，也可以递归")]),e._v(" "),a("p",[e._v("递归的问题是：容易出现爆栈，而且一旦逻辑出错，定位问题的难度也要高于递推")]),e._v(" "),a("h3",{attrs:{id:"回溯经典-八皇后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回溯经典-八皇后"}},[e._v("#")]),e._v(" 回溯经典：八皇后")]),e._v(" "),a("p",[a("strong",[e._v("八皇后问题")]),e._v("是讲解"),a("strong",[e._v("回溯")]),e._v("的经典案例")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://demo.codimd.org/s/ByDu_VKPP",target:"_blank",rel:"noopener noreferrer"}},[e._v("LeetCode 51. N-Queens (hard)"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"附加例题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附加例题"}},[e._v("#")]),e._v(" 附加例题")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://demo.codimd.org/s/SyKBxMeuD",target:"_blank",rel:"noopener noreferrer"}},[e._v("Leetcode 785. 判断二分图(medium)"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"七天学会dfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七天学会dfs"}},[e._v("#")]),e._v(" 七天学会DFS")]),e._v(" "),a("h3",{attrs:{id:"排列、组合、子集问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排列、组合、子集问题"}},[e._v("#")]),e._v(" 排列、组合、子集问题")]),e._v(" "),a("p",[e._v("排列、组合、子集问题是dfs中一类常见的问题，我们用接下来的三天时间练习这三种问题")]),e._v(" "),a("p",[e._v("题目特征：")]),e._v(" "),a("ul",[a("li",[e._v("组合、排列、子集 问题 属于一类基础问题，有一些问题也可以"),a("strong",[e._v("抽象")]),e._v("成求解组合、排列、子集")]),e._v(" "),a("li",[e._v("这类问题"),a("strong",[e._v("数据量不会太大")])]),e._v(" "),a("li",[e._v("往往可以用"),a("strong",[e._v("DFS")]),e._v("进行"),a("strong",[e._v("暴搜")]),e._v("求解")])]),e._v(" "),a("h4",{attrs:{id:"第一天-排列问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一天-排列问题"}},[e._v("#")]),e._v(" 第一天（排列问题）")]),e._v(" "),a("p",[e._v("题目特征: 请枚举所有排列")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("LeetCode 46. Permutations (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 47. Permutations II (medium)")])])]),e._v(" "),a("p",[e._v("拓展：")]),e._v(" "),a("ul",[a("li",[e._v("LeetCode 996. Number of Squareful Arrays (hard")])]),e._v(" "),a("h4",{attrs:{id:"第二天-组合问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二天-组合问题"}},[e._v("#")]),e._v(" 第二天（组合问题）")]),e._v(" "),a("p",[e._v("求所有组合方案; 如果存在重复，则需要排序，过滤重复位置")]),e._v(" "),a("p",[e._v("题目特征: 请枚举所有组合")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("LeetCode 77. Combinations (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 39. Combination Sum (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 40. Combination Sum II (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 216. Combination Sum III (medium)")])])]),e._v(" "),a("p",[e._v("拓展：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("LeetCode 93. Restore IP Addresses (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 131. Palindrome Partitioning (medium)")])])]),e._v(" "),a("h4",{attrs:{id:"第三天-子集问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三天-子集问题"}},[e._v("#")]),e._v(" 第三天（子集问题）")]),e._v(" "),a("p",[e._v("题目特征: 请枚举所有子集")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("LeetCode 78. Subsets (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 90. Subsets II (medium)")])])]),e._v(" "),a("h3",{attrs:{id:"棋盘搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#棋盘搜索"}},[e._v("#")]),e._v(" 棋盘搜索")]),e._v(" "),a("p",[e._v("棋盘搜索一般配合 "),a("code",[e._v("DFS + memorization")])]),e._v(" "),a("p",[e._v("记忆化：记录中间状态，回溯的时候能够按照某种规则依次迭代所有状态")]),e._v(" "),a("h4",{attrs:{id:"第四天-让我们来玩小游戏吧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第四天-让我们来玩小游戏吧"}},[e._v("#")]),e._v(" 第四天（让我们来玩小游戏吧）")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("LeetCode 51. N-Queens (hard)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 52. N-Queens II (hard)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 37. Sudoku Solver (hard)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 679. 24 Game (hard)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 529. Minesweeper (medium)")])])]),e._v(" "),a("h4",{attrs:{id:"第五天-解决点实际问题吧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第五天-解决点实际问题吧"}},[e._v("#")]),e._v(" 第五天（解决点实际问题吧）")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("LeetCode 17. Letter Combinations of a Phone Number (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 351. Android Unlock Patterns (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 473. Matchsticks to Square (medium)")])])]),e._v(" "),a("h4",{attrs:{id:"第六天-迷宫问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第六天-迷宫问题"}},[e._v("#")]),e._v(" 第六天（迷宫问题）")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("LeetCode 79. Word Search (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 329. Longest Increasing Path in a Matrix (hard)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 490. The Maze (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 505. The Maze II (medium)")])])]),e._v(" "),a("h4",{attrs:{id:"第七天-表达式中的dfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第七天-表达式中的dfs"}},[e._v("#")]),e._v(" 第七天（表达式中的DFS）")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("LeetCode 22. Generate Parentheses (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 282. Expression Add Operators (hard)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 131. Palindrome Partitioning (medium)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 301. Remove Invalid Parentheses (hard)")])]),e._v(" "),a("li",[a("p",[e._v("LeetCode 306. Additive Number (medium)")])])]),e._v(" "),a("h4",{attrs:{id:"第八天-树形dfs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第八天-树形dfs"}},[e._v("#")]),e._v(" 第八天（树形DFS)")]),e._v(" "),a("ul",[a("li",[e._v("LeetCode 440. K-th Smallest in Lexicographical Order (hard)")])]),e._v(" "),a("h3",{attrs:{id:"其他问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他问题"}},[e._v("#")]),e._v(" 其他问题")]),e._v(" "),a("ul",[a("li",[e._v("LeetCode 526. Beautiful Arrangement (medium)")])])])}),[],!1,null,null,null);t.default=_.exports}}]);