(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{497:function(t,a,s){"use strict";s.r(a);var e=s(4),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"二分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二分"}},[t._v("#")]),t._v(" 二分")]),t._v(" "),s("iframe",{staticStyle:{width:"100%",height:"500px","max-width":"100%；align:center",padding:"20px 0"},attrs:{src:"//player.bilibili.com/player.html?aid=413537829&bvid=BV1TV411k79w&cid=204908386&page=1",scrolling:"no",border:"0",frameborder:"no",framespacing:"0",allowfullscreen:"true"}}),t._v(" "),s("p",[s("strong",[t._v("模板题")]),t._v("："),s("a",{attrs:{href:"https://www.acwing.com/problem/content/791/",target:"_blank",rel:"noopener noreferrer"}},[t._v("AcWing 789"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[t._v("如果您没购买 AcWing 课程可以直接忽略，题目较简单")])]),t._v(" "),s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("ul",[s("li",[t._v("二分都是跟单调性有关，有单调性的题目一般都可以二分。")]),t._v(" "),s("li",[t._v("题目存在两段性的性质。一部分满足，一部分不满足。")])]),t._v(" "),s("h2",{attrs:{id:"算法思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法思想"}},[t._v("#")]),t._v(" 算法思想")]),t._v(" "),s("p",[t._v("将区间分为左右两边（分治），判断中点，确定答案在哪一边，每次缩小一半，直到得到最终答案。")]),t._v(" "),s("ul",[s("li",[t._v("需要注意"),s("strong",[t._v("边界问题")])])]),t._v(" "),s("h2",{attrs:{id:"模板"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板"}},[t._v("#")]),t._v(" 模板")]),t._v(" "),s("p",[t._v("二分模板一共有两个，分别适用于不同情况。")]),t._v(" "),s("p",[t._v("算法思路：假设目标值在闭区间"),s("code",[t._v("[l, r]")]),t._v("中， 每次将区间长度缩小一半，当"),s("code",[t._v("l == r")]),t._v("时，我们就找到了目标值。")]),t._v(" "),s("h3",{attrs:{id:"模板1-区间-l-mid-和-mid-1-r"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板1-区间-l-mid-和-mid-1-r"}},[t._v("#")]),t._v(" 模板1(区间[l, mid]和[mid+1, r])")]),t._v(" "),s("p",[t._v("当我们将区间"),s("code",[t._v("[l, r]")]),t._v("划分成"),s("code",[t._v("[l, mid]")]),t._v("和"),s("code",[t._v("[mid + 1, r]")]),t._v("时，"),s("code",[t._v("mid=l+r>>1")]),t._v("，其更新操作是"),s("code",[t._v("r = mid")]),t._v("或者"),s("code",[t._v("l = mid + 1")]),t._v(";")]),t._v(" "),s("p",[t._v("C++ 代码模板：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("binary_search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("此模板返回的结果是"),s("strong",[t._v("对应区间的最左边元素")])]),t._v(" "),s("h3",{attrs:{id:"模板2-区间-l-mid-1-和-mid-r"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板2-区间-l-mid-1-和-mid-r"}},[t._v("#")]),t._v(" 模板2(区间[l, mid-1]和[mid, r])")]),t._v(" "),s("p",[t._v("当我们将区间"),s("code",[t._v("[l, r]")]),t._v("划分成"),s("code",[t._v("[l, mid - 1]")]),t._v("和"),s("code",[t._v("[mid, r]")]),t._v("时，"),s("code",[t._v("mid=l+r+1>>1")]),t._v("，其更新操作是"),s("code",[t._v("r = mid - 1")]),t._v("或者"),s("code",[t._v("l = mid")]),t._v(";")]),t._v(" "),s("p",[t._v("因为"),s("code",[t._v("r=mid-1")]),t._v("，为了防止死循环，计算"),s("code",[t._v("mid")]),t._v("时需要加1。")]),t._v(" "),s("p",[t._v("C++ 代码模板：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("binary_search")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" mid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" l"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("此模板返回的结果是"),s("strong",[t._v("对应区间的最右边元素")])]),t._v(" "),s("h2",{attrs:{id:"七天学会二分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#七天学会二分"}},[t._v("#")]),t._v(" 七天学会二分")]),t._v(" "),s("h3",{attrs:{id:"第一天-概念题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一天-概念题"}},[t._v("#")]),t._v(" 第一天（概念题）")]),t._v(" "),s("p",[t._v("初识二分算法，学习两种二分查找的算法模板")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("LeetCode 704. Binary Search (easy)")])]),t._v(" "),s("li",[s("p",[t._v("LeetCode 69. Sqrt(x) (easy)")])])]),t._v(" "),s("p",[t._v("选做：")]),t._v(" "),s("ul",[s("li",[t._v("LeetCode 35. Search Insert Position (easy)")])]),t._v(" "),s("h3",{attrs:{id:"第二天-模板强化练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二天-模板强化练习"}},[t._v("#")]),t._v(" 第二天（模板强化练习）")]),t._v(" "),s("p",[t._v("通过一道题练习两种模板的使用")]),t._v(" "),s("ul",[s("li",[t._v("LeetCode 34. Find First and Last Position of Element in Sorted Array (medium)")])]),t._v(" "),s("h3",{attrs:{id:"第三天-峰值元素探险"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三天-峰值元素探险"}},[t._v("#")]),t._v(" 第三天（峰值元素探险）")]),t._v(" "),s("ul",[s("li",[t._v("LeetCode 162. Find Peak Element (medium)")])]),t._v(" "),s("h3",{attrs:{id:"第四天-有趣的旋转排序数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第四天-有趣的旋转排序数组"}},[t._v("#")]),t._v(" 第四天（有趣的旋转排序数组）")]),t._v(" "),s("ul",[s("li",[t._v("LeetCode 153. Find Minimum in Rotated Sorted Array (medium)")]),t._v(" "),s("li",[t._v("LeetCode 154. Find Minimum in Rotated Sorted Array II (hard)")]),t._v(" "),s("li",[t._v("LeetCode 33. Search in Rotated Sorted Array (medium)")])]),t._v(" "),s("h3",{attrs:{id:"第五天-二维矩阵中的二分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第五天-二维矩阵中的二分"}},[t._v("#")]),t._v(" 第五天（二维矩阵中的二分）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("LeetCode 74. Search a 2D Matrix (medium)")])]),t._v(" "),s("li",[s("p",[t._v("LeetCode 378. Kth Smallest Element in a Sorted Matrix (medium)")])])]),t._v(" "),s("h3",{attrs:{id:"第六天-有序数组中第kth大的数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第六天-有序数组中第kth大的数"}},[t._v("#")]),t._v(" 第六天（有序数组中第Kth大的数）")]),t._v(" "),s("p",[t._v("大家都喜欢探讨 "),s("strong",[t._v("无序数组中第Kth大的数")]),t._v("，那有序数组呢？")]),t._v(" "),s("ul",[s("li",[t._v("如何高效寻找两个有序数组中第K大的数？")])]),t._v(" "),s("p",[t._v("思考题：")]),t._v(" "),s("ul",[s("li",[t._v("LeetCode 4. median-of-two-sorted-arrays")])]),t._v(" "),s("h3",{attrs:{id:"第七天-二分-你会了吗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第七天-二分-你会了吗"}},[t._v("#")]),t._v(" 第七天（二分，你会了吗？）")]),t._v(" "),s("p",[t._v("单纯的二分算法思路很简单，只需要划分好区间、选对模板、处理好边界即可，一些数据量比较大的且满足一定单调性的题目中，与二分结合使用，会极大提升算法效率（此部分题目需要在掌握其他算法基础之上进行学习）。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("LeetCode 300. Longest Increasing Subsequence (medium)")])]),t._v(" "),s("li",[s("p",[t._v("LeetCode 287. Find the Duplicate Number (medium)")])]),t._v(" "),s("li",[s("p",[t._v("LeetCode 315. Count of Smaller Numbers After Self (hard)")])])]),t._v(" "),s("h3",{attrs:{id:"更多练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更多练习"}},[t._v("#")]),t._v(" 更多练习")]),t._v(" "),s("ul",[s("li",[t._v("LeetCode 275. H-Index II (medium)")])])])}),[],!1,null,null,null);a.default=r.exports}}]);